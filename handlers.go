package main

import (
    "encoding/json"
    "fmt"
    "net/http"
    "time"
    "labix.org/v2/mgo/bson"
    "github.com/gorilla/mux"
    "io"
    "io/ioutil"
)

type AdminUser struct {
    Username string     `json: "username"`
    Password string     `json: "password"`
}

func Index(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintln(w, "Welcome!")
}

func ServerIndex(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "application/json; charset=UTF-8")
    w.WriteHeader(http.StatusOK)

    session, collection := InitServerCollection()
    defer session.Close()
    servers := Servers{}

    SearchAll(bson.M{}, collection, &servers)

    if err := json.NewEncoder(w).Encode(servers); err != nil {
        Log("could not encode servers struct, Error: " + err.Error(), ERROR)
    }
}

func ServerShow(w http.ResponseWriter, r *http.Request) {
    oid := getOID("serverId", r)

    session, collection := InitServerCollection()
    defer session.Close()
    server := Server{}

    SearchOne(bson.M{"_id": oid}, collection, &server)

    if err := json.NewEncoder(w).Encode(server); err != nil {
        Log("could not encode server struct, Error: " + err.Error(), ERROR)
    }
}

func ServerCreate(w http.ResponseWriter, r *http.Request) {
    if IsAllowed(w, r) {
        var server Server
        body, err := ioutil.ReadAll(io.LimitReader(r.Body, 1048576))
        if err != nil {
            Log("could not read POST body, Error: " + err.Error(), ERROR)
        }

        if err := r.Body.Close(); err != nil {
            Log("could not close POST body, Error: " + err.Error(), ERROR)
        }

        if err := json.Unmarshal(body, &server); err != nil {
            w.Header().Set("Content-Type", "application/json; charset=UTF-8")
            w.WriteHeader(422)  // unprocessable entity
            if err := json.NewEncoder(w).Encode(err); err != nil {
                Log("could not json/encode error, Error: " + err.Error(), ERROR)
            }
        }
        session, collection := InitServerCollection()
        defer session.Close()
        server.Added = time.Now()
        err = collection.Insert(server)
        if err != nil {
            Log("could not insert server to DB, Error: " + err.Error(), ERROR)
        }
        w.Header().Set("Content-Type", "application/json; charset=UTF=8")
        w.WriteHeader(http.StatusCreated)
        if err := json.NewEncoder(w).Encode(server); err != nil {
            panic(err)
        }
    }
}

func ServerDelete(w http.ResponseWriter, r *http.Request) {
    if IsAllowed(w, r) {
        oid := getOID("serverId", r)
        session, collection := InitServerCollection()
        defer session.Close()
        err := collection.Remove(bson.M{"_id": oid})
        if err != nil {
            w.Header().Set("Content-Type", "application/json; charset=UTF-8")
            w.WriteHeader(http.StatusInternalServerError)
            if err := json.NewEncoder(w).Encode(err); err != nil {
                Log("could not json/encode error, Error: " + err.Error(), ERROR)
            }
        }
    }
}

// Handles Authentication requests
func AuthHandler(w http.ResponseWriter, r *http.Request) {
    // has to be POST
    if r.Method != "POST" {
        w.Header().Set("Content-Type", "application/json; charset=UTF-8")
        w.WriteHeader(http.StatusBadRequest)
        return
    }

    var user AdminUser
    json.NewDecoder(r.Body).Decode(&user)

    Log("Authenticate: user["+ user.Username + "] pass[" + user.Password + "]", INFO)

    if Authenticate(user.Username, user.Password) {
        Log("Authenticating user[" + user.Username + "] successful", INFO)
    } else {
        Log("Authenticating user[" + user.Username + "] not successful", WARN)
        w.WriteHeader(http.StatusForbidden)
        return
    }

    tokenString, err := CreateTokenString(user.Username)
    Log("Created token string", DEBUG)

    if err != nil {
        w.WriteHeader(http.StatusInternalServerError)
        fmt.Fprintln(w, "Sorry error while Signing Key")
        Log("Token Signing error: %s" + err.Error(), ERROR)
        return
    }

    w.Header().Set("Content-Type", "application/json; charset=UTF-8")
    w.WriteHeader(http.StatusOK)
    Log("Sending back token: " + tokenString, DEBUG)
    if err := json.NewEncoder(w).Encode(map[string]string{"token":tokenString}); err != nil {
        Log("Sending token unsuccessful, Error: " + err.Error(), ERROR)
    }
}

// Example restricted handler
func RestrictedHandler(w http.ResponseWriter, r *http.Request) {
    // if user has no or invalid token error message is generated by Authenticate
    // if token is valid the content below is shown
    if IsAllowed(w, r) {
        w.Header().Set("Content-Type", "application/json; charset=UTF-8")
        w.WriteHeader(http.StatusOK)
        json.NewEncoder(w).Encode(map[string]string {"secret": "you made it to the secret area"})
    }
}

func getOID(name string, r *http.Request) bson.ObjectId {
    vars := mux.Vars(r)
    id := vars[name]
    return bson.ObjectIdHex(id)
}